// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// Ability defines model for Ability.
type Ability struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// Allegiance defines model for Allegiance.
type Allegiance struct {
	ID            *string `bun:"id,pk" json:"_id,omitempty"`
	Description   *string `json:"description,omitempty"`
	GrandAlliance *string `json:"grand_alliance,omitempty"`
	MortalRealm   *string `json:"mortal_realm,omitempty"`
	Name          string  `json:"name"`
}

// Army defines model for Army.
type Army struct {
	ID    *string `bun:"id,pk" json:"_id,omitempty"`
	Name  string  `json:"name"`
	Units []Unit  `json:"units,omitempty"`
}

// Attribute defines model for Attribute.
type Attribute struct {
	Name  *string `json:"name,omitempty"`
	Value *int64  `json:"value,omitempty"`
}

// City defines model for City.
type City struct {
	ID          *string `bun:"id,pk" json:"_id,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// DamageTable defines model for DamageTable.
type DamageTable struct {
	ID                 *string `bun:"id,pk" json:"_id,omitempty"`
	MinWoundsSuffered  *int64  `json:"min_wounds_suffered,omitempty"`
	Move               *Move   `json:"move,omitempty"`
	WoundTrackPosition *int64  `json:"wound_track_position,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GrandAlliance defines model for GrandAlliance.
type GrandAlliance struct {
	ID          *string `bun:",pk" json:"_id,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// GrandStrategy defines model for GrandStrategy.
type GrandStrategy struct {
	ID          *string `bun:",pk" json:"_id,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// Health defines model for Health.
type Health struct {
	Status string `json:"status"`
}

// Move defines model for Move.
type Move struct {
	Name  *string `json:"name,omitempty"`
	Value *int64  `json:"value,omitempty"`
}

// Size defines model for Size.
type Size struct {
	Unit  *string `json:"unit,omitempty"`
	Value *int64  `json:"value,omitempty"`
}

// Unit defines model for Unit.
type Unit struct {
	ID               *string       `bun:"id,pk" json:"_id,omitempty"`
	Abilities        []Ability     `json:"abilities,omitempty"`
	Bravery          *int64        `json:"bravery,omitempty"`
	Champion         *string       `json:"champion,omitempty"`
	CommandAbilities []Attribute   `json:"command_abilities,omitempty"`
	DamageTable      []DamageTable `json:"damage_table,omitempty"`
	Description      *string       `json:"description,omitempty"`
	GrandAlliance    *string       `json:"grand_alliance,omitempty"`
	Keywords         []string      `json:"keywords,omitempty"`
	Magic            []Attribute   `json:"magic,omitempty"`
	MeleeWeapons     []Weapon      `json:"melee_weapons,omitempty"`
	MissileWeapons   []Weapon      `json:"missile_weapons,omitempty"`
	Models           *int64        `json:"models,omitempty"`
	Move             *Move         `json:"move,omitempty"`
	Name             string        `json:"name"`
	Points           *int64        `json:"points,omitempty"`
	Save             *int64        `json:"save,omitempty"`
	Size             *Size         `json:"size,omitempty"`
	Wounds           *int64        `json:"wounds,omitempty"`
}

// Warscroll defines model for Warscroll.
type Warscroll struct {
	ID              *string        `bun:",pk" json:"_id,omitempty"`
	Allegiance      *Allegiance    `json:"allegiance,omitempty"`
	AllegianceID    *string        `json:"allegiance_id,omitempty"`
	BattlefieldRole *string        `json:"battlefield_role,omitempty"`
	GrandAlliance   *GrandAlliance `json:"grand_alliance,omitempty"`
	GrandAllianceID *string        `json:"grand_alliance_id,omitempty"`
	Name            *string        `json:"name,omitempty"`
	Notes           *string        `json:"notes,omitempty"`
	Points          *int64         `json:"points,omitempty"`
	Size            *int64         `json:"size,omitempty"`
}

// Weapon defines model for Weapon.
type Weapon struct {
	ID      *string `bun:",pk" json:"_id,omitempty"`
	Attacks *int64  `json:"attacks,omitempty"`
	Damage  *int64  `json:"damage,omitempty"`
	Name    *string `json:"name,omitempty"`
	Range   *int64  `json:"range,omitempty"`
	Rend    *int64  `json:"rend,omitempty"`
	ToHit   *int64  `json:"to_hit,omitempty"`
	ToWound *int64  `json:"to_wound,omitempty"`
}

// GetAllegiancesParams defines parameters for GetAllegiances.
type GetAllegiancesParams struct {
	// name of allegiance to filter by
	Name *string `json:"name,omitempty"`

	// id of grand alliance to filter by
	GrandAlliance *string `json:"grand_alliance,omitempty"`
}

// GetCitiesParams defines parameters for GetCities.
type GetCitiesParams struct {
	// name of city to filter by
	Name *string `json:"name,omitempty"`
}

// GetUnitsParams defines parameters for GetUnits.
type GetUnitsParams struct {
	// name of unit to filter by
	Name *string `json:"name,omitempty"`

	// grand alliance of unit to filter by
	GrandAlliance *string `json:"grand_alliance,omitempty"`

	// grand strategy of unit to filter by
	GrandStrategy *string `json:"grand_strategy,omitempty"`

	// points of unit to filter by
	Points *int `json:"points,omitempty"`
}

// GetWarscrollsParams defines parameters for GetWarscrolls.
type GetWarscrollsParams struct {
	// name of warscroll to filter by
	Name *string `json:"name,omitempty"`

	// points of warscroll to filter by
	Points *int `json:"points,omitempty"`

	// battlefield_role of warscroll to filter by
	BattlefieldRole *string `json:"battlefield_role,omitempty"`

	// size of warscroll to filter by
	Size *string `json:"size,omitempty"`

	// notes of warscroll to filter by
	Notes *string `json:"notes,omitempty"`
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// GetAllegiancesJSON200Response is a constructor method for a GetAllegiances response.
// A *Response is returned with the configured status code and content type from the spec.
func GetAllegiancesJSON200Response(body []Allegiance) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetAllegiancesJSON404Response is a constructor method for a GetAllegiances response.
// A *Response is returned with the configured status code and content type from the spec.
func GetAllegiancesJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetAllegianceByIDJSON200Response is a constructor method for a GetAllegianceByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetAllegianceByIDJSON200Response(body Allegiance) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetAllegianceByIDJSON404Response is a constructor method for a GetAllegianceByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetAllegianceByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetArmiesJSON200Response is a constructor method for a GetArmies response.
// A *Response is returned with the configured status code and content type from the spec.
func GetArmiesJSON200Response(body []Army) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetArmiesJSON404Response is a constructor method for a GetArmies response.
// A *Response is returned with the configured status code and content type from the spec.
func GetArmiesJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetArmyByIDJSON200Response is a constructor method for a GetArmyByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetArmyByIDJSON200Response(body Army) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetArmyByIDJSON404Response is a constructor method for a GetArmyByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetArmyByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetCitiesJSON200Response is a constructor method for a GetCities response.
// A *Response is returned with the configured status code and content type from the spec.
func GetCitiesJSON200Response(body []City) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetCitiesJSON404Response is a constructor method for a GetCities response.
// A *Response is returned with the configured status code and content type from the spec.
func GetCitiesJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetCityByIDJSON200Response is a constructor method for a GetCityByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetCityByIDJSON200Response(body City) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetCityByIDJSON404Response is a constructor method for a GetCityByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetCityByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetDocsJSON404Response is a constructor method for a GetDocs response.
// A *Response is returned with the configured status code and content type from the spec.
func GetDocsJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetGrandAlliancesJSON200Response is a constructor method for a GetGrandAlliances response.
// A *Response is returned with the configured status code and content type from the spec.
func GetGrandAlliancesJSON200Response(body []GrandAlliance) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetGrandAlliancesJSON404Response is a constructor method for a GetGrandAlliances response.
// A *Response is returned with the configured status code and content type from the spec.
func GetGrandAlliancesJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetGrandAllianceByIDJSON200Response is a constructor method for a GetGrandAllianceByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetGrandAllianceByIDJSON200Response(body GrandAlliance) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetGrandAllianceByIDJSON404Response is a constructor method for a GetGrandAllianceByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetGrandAllianceByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetGrandStrategiesJSON200Response is a constructor method for a GetGrandStrategies response.
// A *Response is returned with the configured status code and content type from the spec.
func GetGrandStrategiesJSON200Response(body []GrandStrategy) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetGrandStrategiesJSON404Response is a constructor method for a GetGrandStrategies response.
// A *Response is returned with the configured status code and content type from the spec.
func GetGrandStrategiesJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetGrandStrategyByIDJSON200Response is a constructor method for a GetGrandStrategyByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetGrandStrategyByIDJSON200Response(body GrandStrategy) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetGrandStrategyByIDJSON404Response is a constructor method for a GetGrandStrategyByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetGrandStrategyByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetHealthzJSON200Response is a constructor method for a GetHealthz response.
// A *Response is returned with the configured status code and content type from the spec.
func GetHealthzJSON200Response(body Health) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetHealthzJSON404Response is a constructor method for a GetHealthz response.
// A *Response is returned with the configured status code and content type from the spec.
func GetHealthzJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetUnitsJSON200Response is a constructor method for a GetUnits response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUnitsJSON200Response(body []Unit) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetUnitsJSON404Response is a constructor method for a GetUnits response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUnitsJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetUnitByIDJSON200Response is a constructor method for a GetUnitByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUnitByIDJSON200Response(body Unit) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetUnitByIDJSON404Response is a constructor method for a GetUnitByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUnitByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetAbilitiesForUnitByIDJSON200Response is a constructor method for a GetAbilitiesForUnitByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetAbilitiesForUnitByIDJSON200Response(body []Ability) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetAbilitiesForUnitByIDJSON404Response is a constructor method for a GetAbilitiesForUnitByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetAbilitiesForUnitByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetWarscrollsJSON200Response is a constructor method for a GetWarscrolls response.
// A *Response is returned with the configured status code and content type from the spec.
func GetWarscrollsJSON200Response(body []Warscroll) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetWarscrollsJSON404Response is a constructor method for a GetWarscrolls response.
// A *Response is returned with the configured status code and content type from the spec.
func GetWarscrollsJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetWarscrollByIDJSON200Response is a constructor method for a GetWarscrollByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetWarscrollByIDJSON200Response(body Warscroll) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetWarscrollByIDJSON404Response is a constructor method for a GetWarscrollByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetWarscrollByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all allegiances
	// (GET /allegiances)
	GetAllegiances(w http.ResponseWriter, r *http.Request, params GetAllegiancesParams) *Response
	// Get allegiance by id
	// (GET /allegiances/{id})
	GetAllegianceByID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Get all armies
	// (GET /armies)
	GetArmies(w http.ResponseWriter, r *http.Request) *Response
	// Get army by id
	// (GET /armies/{id})
	GetArmyByID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Get all cities
	// (GET /cities)
	GetCities(w http.ResponseWriter, r *http.Request, params GetCitiesParams) *Response
	// Get city by id
	// (GET /cities/{id})
	GetCityByID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Get API documentation
	// (GET /docs)
	GetDocs(w http.ResponseWriter, r *http.Request) *Response
	// Get all grand alliances
	// (GET /grand-alliances)
	GetGrandAlliances(w http.ResponseWriter, r *http.Request) *Response
	// Get grand alliance by id
	// (GET /grand-alliances/{id})
	GetGrandAllianceByID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Get all grand strategies
	// (GET /grand-strategies)
	GetGrandStrategies(w http.ResponseWriter, r *http.Request) *Response
	// Get grand strategy by id
	// (GET /grand-strategies/{id})
	GetGrandStrategyByID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Get health status
	// (GET /healthz)
	GetHealthz(w http.ResponseWriter, r *http.Request) *Response
	// Get all units
	// (GET /units)
	GetUnits(w http.ResponseWriter, r *http.Request, params GetUnitsParams) *Response
	// Get unit by id
	// (GET /units/{id})
	GetUnitByID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Get abilities for unit by id
	// (GET /units/{id}/abilities)
	GetAbilitiesForUnitByID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Get all warscrolls
	// (GET /warscrolls)
	GetWarscrolls(w http.ResponseWriter, r *http.Request, params GetWarscrollsParams) *Response
	// Get warscroll by id
	// (GET /warscrolls/{id})
	GetWarscrollByID(w http.ResponseWriter, r *http.Request, id string) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// GetAllegiances operation middleware
func (siw *ServerInterfaceWrapper) GetAllegiances(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllegiancesParams

	// ------------- Optional query parameter "name" -------------

	if err := runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name); err != nil {
		err = fmt.Errorf("invalid format for parameter name: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "name"})
		return
	}

	// ------------- Optional query parameter "grand_alliance" -------------

	if err := runtime.BindQueryParameter("form", true, false, "grand_alliance", r.URL.Query(), &params.GrandAlliance); err != nil {
		err = fmt.Errorf("invalid format for parameter grand_alliance: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "grand_alliance"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetAllegiances(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetAllegianceByID operation middleware
func (siw *ServerInterfaceWrapper) GetAllegianceByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetAllegianceByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetArmies operation middleware
func (siw *ServerInterfaceWrapper) GetArmies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetArmies(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetArmyByID operation middleware
func (siw *ServerInterfaceWrapper) GetArmyByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetArmyByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetCities operation middleware
func (siw *ServerInterfaceWrapper) GetCities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCitiesParams

	// ------------- Optional query parameter "name" -------------

	if err := runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name); err != nil {
		err = fmt.Errorf("invalid format for parameter name: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "name"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetCities(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetCityByID operation middleware
func (siw *ServerInterfaceWrapper) GetCityByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetCityByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetDocs operation middleware
func (siw *ServerInterfaceWrapper) GetDocs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetDocs(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetGrandAlliances operation middleware
func (siw *ServerInterfaceWrapper) GetGrandAlliances(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetGrandAlliances(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetGrandAllianceByID operation middleware
func (siw *ServerInterfaceWrapper) GetGrandAllianceByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetGrandAllianceByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetGrandStrategies operation middleware
func (siw *ServerInterfaceWrapper) GetGrandStrategies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetGrandStrategies(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetGrandStrategyByID operation middleware
func (siw *ServerInterfaceWrapper) GetGrandStrategyByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetGrandStrategyByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetHealthz(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetUnits operation middleware
func (siw *ServerInterfaceWrapper) GetUnits(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUnitsParams

	// ------------- Optional query parameter "name" -------------

	if err := runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name); err != nil {
		err = fmt.Errorf("invalid format for parameter name: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "name"})
		return
	}

	// ------------- Optional query parameter "grand_alliance" -------------

	if err := runtime.BindQueryParameter("form", true, false, "grand_alliance", r.URL.Query(), &params.GrandAlliance); err != nil {
		err = fmt.Errorf("invalid format for parameter grand_alliance: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "grand_alliance"})
		return
	}

	// ------------- Optional query parameter "grand_strategy" -------------

	if err := runtime.BindQueryParameter("form", true, false, "grand_strategy", r.URL.Query(), &params.GrandStrategy); err != nil {
		err = fmt.Errorf("invalid format for parameter grand_strategy: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "grand_strategy"})
		return
	}

	// ------------- Optional query parameter "points" -------------

	if err := runtime.BindQueryParameter("form", true, false, "points", r.URL.Query(), &params.Points); err != nil {
		err = fmt.Errorf("invalid format for parameter points: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "points"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetUnits(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetUnitByID operation middleware
func (siw *ServerInterfaceWrapper) GetUnitByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetUnitByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetAbilitiesForUnitByID operation middleware
func (siw *ServerInterfaceWrapper) GetAbilitiesForUnitByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetAbilitiesForUnitByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetWarscrolls operation middleware
func (siw *ServerInterfaceWrapper) GetWarscrolls(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWarscrollsParams

	// ------------- Optional query parameter "name" -------------

	if err := runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name); err != nil {
		err = fmt.Errorf("invalid format for parameter name: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "name"})
		return
	}

	// ------------- Optional query parameter "points" -------------

	if err := runtime.BindQueryParameter("form", true, false, "points", r.URL.Query(), &params.Points); err != nil {
		err = fmt.Errorf("invalid format for parameter points: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "points"})
		return
	}

	// ------------- Optional query parameter "battlefield_role" -------------

	if err := runtime.BindQueryParameter("form", true, false, "battlefield_role", r.URL.Query(), &params.BattlefieldRole); err != nil {
		err = fmt.Errorf("invalid format for parameter battlefield_role: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "battlefield_role"})
		return
	}

	// ------------- Optional query parameter "size" -------------

	if err := runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size); err != nil {
		err = fmt.Errorf("invalid format for parameter size: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "size"})
		return
	}

	// ------------- Optional query parameter "notes" -------------

	if err := runtime.BindQueryParameter("form", true, false, "notes", r.URL.Query(), &params.Notes); err != nil {
		err = fmt.Errorf("invalid format for parameter notes: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "notes"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetWarscrolls(w, r, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetWarscrollByID operation middleware
func (siw *ServerInterfaceWrapper) GetWarscrollByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetWarscrollByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/allegiances", wrapper.GetAllegiances)
		r.Get("/allegiances/{id}", wrapper.GetAllegianceByID)
		r.Get("/armies", wrapper.GetArmies)
		r.Get("/armies/{id}", wrapper.GetArmyByID)
		r.Get("/cities", wrapper.GetCities)
		r.Get("/cities/{id}", wrapper.GetCityByID)
		r.Get("/docs", wrapper.GetDocs)
		r.Get("/grand-alliances", wrapper.GetGrandAlliances)
		r.Get("/grand-alliances/{id}", wrapper.GetGrandAllianceByID)
		r.Get("/grand-strategies", wrapper.GetGrandStrategies)
		r.Get("/grand-strategies/{id}", wrapper.GetGrandStrategyByID)
		r.Get("/healthz", wrapper.GetHealthz)
		r.Get("/units", wrapper.GetUnits)
		r.Get("/units/{id}", wrapper.GetUnitByID)
		r.Get("/units/{id}/abilities", wrapper.GetAbilitiesForUnitByID)
		r.Get("/warscrolls", wrapper.GetWarscrolls)
		r.Get("/warscrolls/{id}", wrapper.GetWarscrollByID)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
