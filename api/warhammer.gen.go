// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// Ability defines model for Ability.
type Ability struct {
	Description *string `json:"description,omitempty"`
	ID          *int64  `bun:",pk" json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// Army defines model for Army.
type Army struct {
	ID    *int64 `bun:"id,pk,autoincrement" json:"id,omitempty"`
	Name  string `json:"name"`
	Units []Unit `json:"units,omitempty"`
}

// Attribute defines model for Attribute.
type Attribute struct {
	ID    *int64  `bun:",pk" json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Value *int64  `json:"value,omitempty"`
}

// DamageTable defines model for DamageTable.
type DamageTable struct {
	ID                 *int64 `bun:",pk" json:"id,omitempty"`
	MinWoundsSuffered  *int64 `json:"min_wounds_suffered,omitempty"`
	Move               *Move  `bun:"rel:has-one,join:id=unit_id" json:"move,omitempty"`
	WoundTrackPosition *int64 `json:"wound_track_position,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Move defines model for Move.
type Move struct {
	ID    *int64  `bun:",pk" json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Value *int64  `json:"value,omitempty"`
}

// Size defines model for Size.
type Size struct {
	ID    *int64  `bun:",pk" json:"id,omitempty"`
	Unit  *string `json:"unit,omitempty"`
	Value *int64  `json:"value,omitempty"`
}

// Unit defines model for Unit.
type Unit struct {
	Abilities        []Ability     `json:"abilities,omitempty"`
	Bravery          *int64        `json:"bravery,omitempty"`
	CommandAbilities []Attribute   `bun:"rel:has-many,join:id=unit_id" json:"command_abilities,omitempty"`
	DamageTable      []DamageTable `bun:"rel:has-many,join:id=unit_id" json:"damage_table,omitempty"`
	Description      *string       `json:"description,omitempty"`
	ID               *int64        `bun:"id,pk,autoincrement" json:"id,omitempty"`
	Keywords         []string      `json:"keywords,omitempty"`
	Magic            []Attribute   `bun:"rel:has-many,join:id=unit_id" json:"magic,omitempty"`
	Models           *int64        `json:"models,omitempty"`
	Move             *Move         `bun:"rel:has-one,join:id=unit_id" json:"move,omitempty"`
	Name             string        `json:"name"`
	Points           *int64        `json:"points,omitempty"`
	Save             *int64        `json:"save,omitempty"`
	Size             *Size         `bun:"rel:has-one,join:id=unit_id" json:"size,omitempty"`
	Weapons          []Weapon      `bun:"rel:has-many,join:id=unit_id" json:"weapons,omitempty"`
	Wounds           *int64        `json:"wounds,omitempty"`
}

// Weapon defines model for Weapon.
type Weapon struct {
	Attacks *int64  `json:"attacks,omitempty"`
	Damage  *int64  `json:"damage,omitempty"`
	ID      *int64  `bun:",pk" json:"id,omitempty"`
	Name    *string `json:"name,omitempty"`
	Range   *int64  `json:"range,omitempty"`
	Rend    *int64  `json:"rend,omitempty"`
	ToHit   *int64  `json:"to_hit,omitempty"`
	ToWound *int64  `json:"to_wound,omitempty"`
}

// UpdateArmyByIDJSONBody defines parameters for UpdateArmyByID.
type UpdateArmyByIDJSONBody interface{}

// CreateUnitJSONBody defines parameters for CreateUnit.
type CreateUnitJSONBody Unit

// UpdateUnitByIDJSONBody defines parameters for UpdateUnitByID.
type UpdateUnitByIDJSONBody Unit

// UpdateArmyByIDJSONRequestBody defines body for UpdateArmyByID for application/json ContentType.
type UpdateArmyByIDJSONRequestBody UpdateArmyByIDJSONBody

// CreateUnitJSONRequestBody defines body for CreateUnit for application/json ContentType.
type CreateUnitJSONRequestBody CreateUnitJSONBody

// Bind implements render.Binder.
func (CreateUnitJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UpdateUnitByIDJSONRequestBody defines body for UpdateUnitByID for application/json ContentType.
type UpdateUnitByIDJSONRequestBody UpdateUnitByIDJSONBody

// Bind implements render.Binder.
func (UpdateUnitByIDJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// GetArmiesJSON200Response is a constructor method for a GetArmies response.
// A *Response is returned with the configured status code and content type from the spec.
func GetArmiesJSON200Response(body []Army) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetArmiesJSON404Response is a constructor method for a GetArmies response.
// A *Response is returned with the configured status code and content type from the spec.
func GetArmiesJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetArmyByIDJSON200Response is a constructor method for a GetArmyByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetArmyByIDJSON200Response(body Army) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetArmyByIDJSON404Response is a constructor method for a GetArmyByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetArmyByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// UpdateArmyByIDJSON200Response is a constructor method for a UpdateArmyByID response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateArmyByIDJSON200Response(body Army) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateArmyByIDJSON404Response is a constructor method for a UpdateArmyByID response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateArmyByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetUnitsJSON200Response is a constructor method for a GetUnits response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUnitsJSON200Response(body []Unit) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetUnitsJSON404Response is a constructor method for a GetUnits response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUnitsJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// CreateUnitJSON201Response is a constructor method for a CreateUnit response.
// A *Response is returned with the configured status code and content type from the spec.
func CreateUnitJSON201Response(body Unit) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// CreateUnitJSON400Response is a constructor method for a CreateUnit response.
// A *Response is returned with the configured status code and content type from the spec.
func CreateUnitJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// DeleteUnitByIDJSON200Response is a constructor method for a DeleteUnitByID response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteUnitByIDJSON200Response(body Unit) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// DeleteUnitByIDJSON404Response is a constructor method for a DeleteUnitByID response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteUnitByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// GetUnitByIDJSON200Response is a constructor method for a GetUnitByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUnitByIDJSON200Response(body Unit) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetUnitByIDJSON404Response is a constructor method for a GetUnitByID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUnitByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// UpdateUnitByIDJSON200Response is a constructor method for a UpdateUnitByID response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateUnitByIDJSON200Response(body Unit) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateUnitByIDJSON404Response is a constructor method for a UpdateUnitByID response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateUnitByIDJSON404Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        404,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all armies
	// (GET /armies)
	GetArmies(w http.ResponseWriter, r *http.Request) *Response
	// Get army by id
	// (GET /armies/{id})
	GetArmyByID(w http.ResponseWriter, r *http.Request, id int64) *Response
	// Update army by id
	// (PUT /armies/{id})
	UpdateArmyByID(w http.ResponseWriter, r *http.Request, id int64) *Response
	// Get all units
	// (GET /units)
	GetUnits(w http.ResponseWriter, r *http.Request) *Response
	// Create a unit
	// (POST /units)
	CreateUnit(w http.ResponseWriter, r *http.Request) *Response
	// Delete unit by id
	// (DELETE /units/{id})
	DeleteUnitByID(w http.ResponseWriter, r *http.Request, id int64) *Response
	// Get unit by id
	// (GET /units/{id})
	GetUnitByID(w http.ResponseWriter, r *http.Request, id int64) *Response
	// Update unit by id
	// (PUT /units/{id})
	UpdateUnitByID(w http.ResponseWriter, r *http.Request, id int64) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// GetArmies operation middleware
func (siw *ServerInterfaceWrapper) GetArmies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetArmies(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetArmyByID operation middleware
func (siw *ServerInterfaceWrapper) GetArmyByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id int64

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetArmyByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UpdateArmyByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateArmyByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id int64

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UpdateArmyByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetUnits operation middleware
func (siw *ServerInterfaceWrapper) GetUnits(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetUnits(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// CreateUnit operation middleware
func (siw *ServerInterfaceWrapper) CreateUnit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.CreateUnit(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeleteUnitByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteUnitByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id int64

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteUnitByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetUnitByID operation middleware
func (siw *ServerInterfaceWrapper) GetUnitByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id int64

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetUnitByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UpdateUnitByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateUnitByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id int64

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UpdateUnitByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/armies", wrapper.GetArmies)
		r.Get("/armies/{id}", wrapper.GetArmyByID)
		r.Put("/armies/{id}", wrapper.UpdateArmyByID)
		r.Get("/units", wrapper.GetUnits)
		r.Post("/units", wrapper.CreateUnit)
		r.Delete("/units/{id}", wrapper.DeleteUnitByID)
		r.Get("/units/{id}", wrapper.GetUnitByID)
		r.Put("/units/{id}", wrapper.UpdateUnitByID)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY32/bNhD+V4TbHpXYaYOhELCHZNmGYOtWrDX6UATGWTzbTERSPVJuvcD/+0BSzg9L",
	"thU3xhz0zfad7o7fd/cd5VvIjSqNJu0sZLdg8ykpDB/PRrKQbu4/lmxKYicpGATZnGXppNH+q5uXBBlY",
	"x1JPYJGCFP7nsWGFDjKQ2v10CunST2pHE2JI4evRxBzRV8d45HASQo8qDRmk5Q0sFiloVNSSYXEXy4yu",
	"KXc+5xmrlkq/uRIp0vImxcoZqXMmRdptqiyFSssIpHSkwocfmcaQwQ+9e6B7Ncq9gZah+joMMuM8xGf6",
	"XEkmAdmnmOuq7czOsRxVjvZw8C0UpDDDoqIuSVrpukCFE/qAo2KfxSuph19MpYUd2mo8pgBoh4pTUGZG",
	"28h7630WKYQMQ8eY3wxLY+VyLnYC5ldmw01IciMaYL9+1V46WYuTNXPzsK9CzHv/tg57W8PwgpprQ1qm",
	"IpuiPTKa0msjdSbFz35eh1KEQO/lv/s8rU91QKcd1OU8Pi0G0V8evYuGLddEQ8ZSGDHOiOcdZy43SqEW",
	"wx1KuBPC1SI64KNQz1sBEkGjhm4pUp1KeShsz1rMvnfuuk13Q/MvhsVjMhrpV5lXOJH5/8yfMoIKuwfB",
	"XytbpZH1NapDRosz6upaC9Om4oJ4+W1EWBrdfXY+Bv9nBT6u3K6C1umqU1fZlCvnML/pCnmc6I7O+99y",
	"jLpzNUy6693FmeE0Sns350DXjhcW/5PUY9N4LYAPU2kTaRPUydm7y8SWlMuxzNGbk7HhBJOBNuOxzCUW",
	"yUfkKSpFnJxNKDHj5L2cKGT/qK9DOi/BsNlrRmxj7pPj/nHfn86UpLGUkMHr45PjPqRQopsGjnrIqm6i",
	"Cblm/b+TS7AoktotxOJQ/aWI5rOlhcn6kYvBXvX78cKmnZdQ36NlWdQH713b2MVx+roLpH+7ab4nrO4F",
	"+PsP73XaP31SCZsyx/toS6q/jEt+C53jbbZSCv2mX8XNG2uoe7dSLDbjzWqejOaJFGvwnp/PLy8Ci4yK",
	"HLGF7NNqJCl8a4RYziRMrmINvk0hC/TDciQh5LnXH8cVpQ9w2T4PV99I/nbOD5fje6785qtaKB2UAh1t",
	"YjV67EZsFZ7dJ7GfK7Lu3Ij5k5DuQOni+2ybZj8Edbj7y2SjDkevFlkY1Ib9q/Caf2sOWYUjauFqalvA",
	"/YUpMBL8GuBG6yCadh2H7YC2zcPJs+dIW48uIlP9/TN1jiL5J2K4wtVjEu5H4m5fCioo/sn3OORF+D08",
	"tkZfo4eHoLu+hnDOJHXWl7c41zF+AGPZZGyRrpe9DcTWuvd0Vl/sdeiAWV3hast1aAOr0WM3Yg/1OrSb",
	"/n8XfdNsiPCwJZ61M/6nybFIoh1SqLiADKbOlVmvV3jb1FiXvem/8S+/qw+/YyOqPLx+t0SwWa+Hxh5h",
	"KY9zo2BxtfgvAAD//+43R5MbHAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
