package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/brittonhayes/aos/api"
	"github.com/brittonhayes/aos/graph/model"
)

// Allegiances is the resolver for the allegiances field.
func (r *queryResolver) Allegiances(ctx context.Context, filter *model.AllegianceFilters) ([]api.Allegiance, error) {
	if filter == nil {
		return r.Repo.GetAllegiances(ctx, nil)
	}

	return r.Repo.GetAllegiances(ctx, &api.GetAllegiancesParams{
		Name:          filter.Name,
		GrandAlliance: filter.GrandAlliance,
		Limit:         filter.Limit,
		Offset:        filter.Offset,
	})
}

// GrandAlliances is the resolver for the grandAlliances field.
func (r *queryResolver) GrandAlliances(ctx context.Context) ([]api.GrandAlliance, error) {
	return r.Repo.GetGrandAlliances(ctx)
}

// Units is the resolver for the units field.
func (r *queryResolver) Units(ctx context.Context, filter *model.UnitFilters) ([]api.Unit, error) {
	if filter == nil {
		return r.Repo.GetUnits(ctx, nil)
	}

	return r.Repo.GetUnits(ctx, &api.GetUnitsParams{
		Name:          filter.Name,
		GrandAlliance: filter.GrandAlliance,
		GrandStrategy: filter.GrandStrategy,
		Points:        filter.Points,
		Limit:         filter.Limit,
		Offset:        filter.Offset,
	})
}

// Warscrolls is the resolver for the warscrolls field.
func (r *queryResolver) Warscrolls(ctx context.Context, filter *model.WarscrollFilters) ([]api.Warscroll, error) {
	if filter == nil {
		return r.Repo.GetWarscrolls(ctx, nil)
	}

	return r.Repo.GetWarscrolls(ctx, &api.GetWarscrollsParams{
		Name:            filter.Name,
		Points:          filter.Points,
		BattlefieldRole: filter.BattlefieldRole,
		Size:            filter.Size,
		Notes:           filter.Notes,
		Limit:           filter.Limit,
		Offset:          filter.Offset,
	})
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
