version: "3.7"

volumes:
  grafana_data:
  tempo_data:

networks:
  default:
    name: warhammer
    driver: bridge

services:
  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:8090"
    ports:
      - "8090:8090"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  warhammer:
    container_name: warhammer 
    build:
      dockerfile: ./Dockerfile
      context: .
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.warhammer.rule=Host(`warhammer.localhost`)"
      - "traefik.http.routers.warhammer.entrypoints=web"
      - "traefik.docker.network=web"
      - "traefik.http.services.warhammer.loadbalancer.server.port=8080"
    environment:
      - WARHAMMER_SERVICE_NAME
      - WARHAMMER_SERVICE_PORT
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
    command: ["--migrate"]
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
    depends_on:
      otel_collector:
        condition: service_started

  otel_collector:
    image: otel/opentelemetry-collector-contrib:0.76.1
    container_name: otel_collector
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.otel_collector.rule=Host(`otel_collector.localhost`)"
      - "traefik.http.routers.otel_collector.entrypoints=web"
      - "traefik.docker.network=web"
      - "traefik.http.services.otel_collector.loadbalancer.server.port=4318"
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped 
    command: [ "--config=/etc/otel-config.yaml"]
    volumes:
        - ./config/otel-config.yaml:/etc/otel-config.yaml
    ports:
      - "4317"          # OTLP over gRPC receiver
      - "4318"          # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
      - "3500"          # Loki over HTTP receiver
    depends_on:
      - tempo 

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http

  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   container_name: jaeger
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.jaeger.rule=Host(`jaeger.localhost`)"
  #     - "traefik.http.routers.jaeger.entrypoints=web"
  #     - "traefik.docker.network=web"
  #     - "traefik.http.services.jaeger.loadbalancer.server.port=${JAEGER_SERVICE_PORT}"
  #   restart: unless-stopped
  #   command:
  #     - "--memory.max-traces"
  #     - "10000"
  #     - "--query.base-path"
  #     - "/jaeger/ui"
  #     - "--prometheus.server-url"
  #     - "http://${PROMETHEUS_ADDR}" 
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 300M
  #   ports:
  #     - "${JAEGER_SERVICE_PORT}"
  #     - 5775/udp
  #     - 6831/udp
  #     - 6832/udp
  #     - "5778"
  #     - "16685"
  #     - "9411"
  #     - "4317"
  #     - "4318"
  #   environment:
  #     - COLLECTOR_OTLP_ENABLED=true
  #     - METRICS_STORAGE_TYPE=prometheus

  prometheus:
    image: quay.io/prometheus/prometheus:v2.43.0
    container_name: prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.docker.network=web"
      - "traefik.http.services.prometheus.loadbalancer.server.port=${PROMETHEUS_SERVICE_PORT}"
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
    volumes:
      - ./config/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    ports:
      - "${PROMETHEUS_SERVICE_PORT}"

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.docker.network=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=${GRAFANA_SERVICE_PORT}"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor 
    restart: unless-stopped
    ports:
      - "3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/grafana-datasources.yaml

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./config/promtail-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml

  fluentbit:
    image: fluent/fluent-bit
    container_name: fluentbit
    volumes:
      - ./config/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf 
    ports:
      - "24224:24224"
      - "24224:24224/udp"